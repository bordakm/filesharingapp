using Hospital.Domain.Services.FileHandling;
using Microsoft.Azure.Storage;
using Microsoft.Azure.Storage.Auth;
using Microsoft.Azure.Storage.Blob;
using Microsoft.Extensions.Options;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
 
namespace Hospital.Api.Infrastructure.FileHandling
{
    public class AzureBlobFileStorage : IFileStorage
    {
        private readonly AzureBlobConfiguration config;
        private readonly string link;
 
        public AzureBlobFileStorage(IOptions<AzureBlobConfiguration> options)
        {
            config = options.Value;
            link = InitLink();
        }
 
        private string InitLink()
        {
            var link = string.Empty;
            if (config.UseHttps)
            {
                link += $"https://";
            }
            else
            {
                link += $"http://";
            }
 
            link += string.Join(".", config.AccountName, "blob", config.EndpointSuffix);
            link = string.Join("/", link, "{0}", "{1}");
            return link;
        }
 
        public async Task SaveFile(Stream stream, string containerName, string fileName, bool isPublic)
        {
            var container = GetContainer(containerName);
 
            await container.CreateIfNotExistsAsync(
                isPublic
                    ? BlobContainerPublicAccessType.Blob
                    : BlobContainerPublicAccessType.Off,
                new BlobRequestOptions(),
                new OperationContext());
 
            var blob = container.GetBlockBlobReference(fileName);
 
            if (stream.CanSeek)
            {
                stream.Position = 0;
            }
 
            await blob.UploadFromStreamAsync(stream);
        }
 
        public async Task DownloadFile(Stream stream, string containerName, string fileName)
        {
            var container = GetContainer(containerName);
            var blob = container.GetBlockBlobReference(fileName);
 
            await blob.DownloadToStreamAsync(stream);
        }
 
        private CloudBlobContainer GetContainer(string containerName)
        {
            var storageAccount = new CloudStorageAccount(
                new StorageCredentials(config.AccountName, config.Key),
                config.EndpointSuffix,
                config.UseHttps);
 
            var blobClient = storageAccount.CreateCloudBlobClient();
 
            return blobClient.GetContainerReference(containerName);
        }
 
        public string GetFileUrl(string container, string fileName)
        {
            return string.Format(link, container, fileName);
        }
 
        public Dictionary<Domain.Model.File, string> GetFileUrls(IEnumerable<Domain.Model.File> files)
        {
            var result = new Dictionary<Domain.Model.File, string>();
            foreach (var file in files)
            {
                result[file] = string.Format(link, file.Container, file.Name);
            }
 
            return result;
        }
 
        public async Task<bool> GetIfFileExists(string container, string fileName)
        {
            var cloudBlobContainer = GetContainer(container);
            var blob = cloudBlobContainer.GetBlockBlobReference(fileName);
            return await blob.ExistsAsync();
        }
    }
}